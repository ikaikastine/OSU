Algorithm 1 Recurrence Relation:
    for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                best = abs(suffix[bestSuffix] + prefix[bestPrefix])
                curr = abs(suffix[i] + prefix[j])
                if curr < best
                    bestPrefix = i
                    bestSuffix = j
            }
        }

    for loop is executed twice to n and m 
    = [n(n-1)]/2 = (n^2 + n)/2 therefore we have big theta(n^2)


Algorithm 2 Recurrence Relation:




Algorithm 3 Recurrence Relation:
