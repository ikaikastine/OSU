Algorithm 1 Recurrence Relation:
    Since this algorithm divides the initial array in half, and has to iterate through
    each full half from 0 to n, we have the following recurrence relation:

    T(n) = 2(n/2) + n where a = 2, b = 2, f(n) = n and c = 1
    logbase(2)2 = 1 = c
    T(n) = big theta (nlogn)

Algorithm 2 Recurrence Relation:
    Since this algorithm divides the initial array in half, and has to iterate through
    each full half from 0 to n, we have the following recurrence relation:

    T(n) = 2(n/2) + n where a = 2, b = 2, f(n) = n and c = 1
    logbase(2)2 = 1 = c
    T(n) = big theta (nlogn)

Algorithm 3 Recurrence Relation:
    Since this algorithm divides the initial array in half, and has to iterate through
    each full half from 0 to n, we have the following recurrence relation:

    T(n) = 2(n/2) + n where a = 2, b = 2, f(n) = n and c = 1
    logbase(2)2 = 1 = c
    T(n) = big theta (nlogn)