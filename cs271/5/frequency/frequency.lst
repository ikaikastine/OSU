     1                                  	; Name: Kevin Stine
     2                                  	; Creation date: 2/8/15
     3                                  	; Last modified: 2/10/15
     4                                  	;
     5                                  	; 
     6                                  	; Name of file: array.asm
     7                                  	; Description: print an integer from storage and from a register
     8                                  		
     9                                  	; Assemble:	nasm -f elf -l array.lst  array.asm
    10                                  	; Link:		gcc -m32 -o array  array.o
    11                                  	; Run:		./array
    12                                  	; Output:	a=5, eax=7
    13                                  
    14                                  	; Equivalent C code
    15                                  	; /* array.c  print an int and an expression */
    16                                  	; #include <stdio.h>
    17                                  	; int main()
    18                                  	; {
    19                                  	;   int a=5;
    20                                  	;   printf("a=%d, eax=%d\n", a, a+2);
    21                                  	;   return 0;
    22                                  	; }
    23                                  
    24                                  	; Declare needed external functions
    25                                  	;
    26                                  	extern printf  
    27                                  	extern scanf
    28                                  
    29                                  SECTION .data              ; Data section, initialized variables
    30                                  
    31                                  	;data relevent to the frequency block section
    32 00000000 48656C6C6F2C206D79-     	freqString:	db "Hello, my name is Kevin.", 0
    33 00000009 206E616D6520697320-
    34 00000012 4B6576696E2E00     
    35                                  	freqStringLen:	equ $-freqString-1
    36                                  
    37 00000019 54686520666F6C6C6F-     	freqInstructions: 	db "The following is your string: ", 0
    38 00000022 77696E672069732079-
    39 0000002B 6F757220737472696E-
    40 00000034 673A2000           
    41 00000038 257300                  	strFmt:		db "%s", 0 ;string format 
    42 0000003B 25633A2000              	charFmt:	db "%c: ", 0 ;character format 
    43 00000040 256400                  	freqNum:	db "%d", 0
    44 00000043 256600                  	relFreq:	db "%f", 0
    45 00000046 200A00                  	newline:	db " ", 10, 0
    46 00000049 2E00                    	dot:		db ".", 0
    47 0000004B 256400                  	intFmt:		db "%d", 0
    48 0000004E 18                      	strLen:		db 24
    49                                  
    50                                  SECTION .bss 
    51 00000000 <res 00000004>          	input: 		resd 1 
    52 00000004 <res 00000004>          	newArray:	resd 1 
    53 00000008 <res 00000004>          	primeInput:	resd 1
    54 0000000C <res 00000004>          	remainder:	resd 1
    55 00000010 <res 00000200>          	freqArray:	resd 128
    56 00000210 <res 00000008>          	remFreq:	resq 1
    57                                  
    58                                  SECTION .text               ; Code section.
    59                                  	
    60                                  	global main             ; the standard gcc entry point
    61                                  
    62                                  	main:                   ; the program label for the entry point
    63 00000000 55                      	    push    ebp         ; set up stack frame
    64 00000001 89E5                    	    mov     ebp,esp
    65                                  
    66 00000003 BE00000000              	    mov esi, 0      ; counter to increment set up for looping through array
    67                                  
    68                                  	 
    69                                  		freqBlock:
    70 00000008 BE[00000000]            		mov esi, freqString
    71 0000000D BF00000000              		mov edi, 0
    72 00000012 BB[10000000]            		mov ebx, freqArray
    73 00000017 B918000000              		mov ecx, freqStringLen
    74                                  		.initLoop:
    75 0000001C 31C0                    		    xor eax, eax
    76 0000001E 8A06                    		    mov al, [esi]
    77 00000020 01C7                    		    add edi, eax
    78 00000022 BB01000000              		    mov ebx, 1
    79 00000027 011CBD[10000000]        		    add [freqArray+4*edi], ebx
    80                                  
    81 0000002E BF00000000              		    mov edi, 0
    82 00000033 81C601000000            		    add esi, 1
    83 00000039 E2E1                    		    loop .initLoop
    84                                  
    85 0000003B 68[00000000]            		    push dword freqString
    86 00000040 68[38000000]            		    push dword strFmt
    87 00000045 E8(00000000)            		    call printf
    88 0000004A 81C408000000            		    add esp, 8
    89                                  
    90 00000050 68[46000000]            		    push dword newline
    91 00000055 E8(00000000)            		    call printf
    92 0000005A 81C404000000            		    add esp, 4
    93                                     
    94 00000060 BB[10000000]            		    mov ebx, freqArray
    95 00000065 B980000000              		    mov ecx, 128                            
    96 0000006A BE00000000              		    mov esi, 0                              
    97                                  		.finalLoop:
    98 0000006F B800000000              		    mov eax, 0
    99 00000074 390433                  		    cmp [ebx+esi], eax
   100 00000077 744A                    		    je .skip
   101 00000079 89F0                    		    mov eax, esi
   102 0000007B 53                      		    push ebx
   103 0000007C 51                      		    push ecx
   104 0000007D BB04000000              		    mov ebx, 4
   105 00000082 99                      		    cdq
   106 00000083 F7F3                    		    div ebx
   107 00000085 50                      		    push eax
   108 00000086 68[3B000000]            		    push dword charFmt
   109 0000008B E8(00000000)            		    call printf
   110 00000090 81C408000000            		    add esp, 8
   111 00000096 59                      		    pop ecx
   112 00000097 5B                      		    pop ebx
   113                                  
   114 00000098 53                      		    push ebx
   115 00000099 51                      		    push ecx                                    
   116 0000009A FF3433                  		    push dword [ebx + esi]     ;push value of array onto stack                                    
   117 0000009D 68[40000000]            		    push dword freqNum
   118 000000A2 E8(00000000)            		    call printf                                 
   119 000000A7 81C408000000            		    add esp, 8                                 
   120 000000AD 59                      		    pop ecx                                    
   121 000000AE 5B                      		    pop ebx
   122                                  
   123 000000AF 53                      		    push ebx
   124 000000B0 51                      		    push ecx
   125 000000B1 68[46000000]            		    push dword newline
   126 000000B6 E8(00000000)            		    call printf
   127 000000BB 81C404000000            		    add esp, 4
   128 000000C1 59                      		    pop ecx
   129 000000C2 5B                      		    pop ebx
   130                                  
   131                                  		.skip:
   132 000000C3 81C604000000            		    add esi, 4
   133 000000C9 E2A4                    		    loop .finalLoop
   134                                  		.end:
   135 000000CB 89EC                    		    mov esp, ebp
   136 000000CD 5D                      			pop ebp
   137 000000CE 89D8                    			mov eax, ebx
   138 000000D0 C3                      			ret 
   139                                  
   140                                  	
   141                                  
   142                                  
   143 000000D1 68[46000000]            		push dword newline 
   144 000000D6 E8(00000000)            		call printf 
   145 000000DB 81C404000000            		add esp, 4
   146                                  
   147 000000E1 89EC                    	    mov     esp, ebp    ; takedown stack frame
   148 000000E3 5D                      	    pop     ebp         ; same as "leave" op
   149                                  
   150 000000E4 B800000000              	    mov     eax, 0       ; normal, no error, return value
   151 000000E9 C3                      	    ret                 ; return
