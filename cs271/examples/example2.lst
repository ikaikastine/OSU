     1                                  	extern printf			; the C function, to be called
     2                                  	extern scanf			; C input function
     3                                  
     4                                  SECTION .data				; Data section, initialized variables
     5 00000000 4E616D653A204B6576-     	name: 	db "Name: Kevin Stine", 10, 0
     6 00000009 696E205374696E650A-
     7 00000012 00                 
     8 00000013 41737369676E6D656E-     	hw:		db "Assignment 2", 10, 0
     9 0000001C 7420320A00         
    10 00000021 476F7420256420616E-     	fmt:    db "Got %d and %d as input!", 10, 0 ; The printf format, "\n",'0'
    11 0000002A 642025642061732069-
    12 00000033 6E707574210A00     
    13 0000003A 256420256400            	input:	db "%d %d",0			 ; the scanf format
    14 00000040 506C6561736520656E-     	prompt:	db "Please enter two numbers seperated by a space", 10, 0
    15 00000049 7465722074776F206E-
    16 00000052 756D62657273207365-
    17 0000005B 706572617465642062-
    18 00000064 792061207370616365-
    19 0000006D 0A00               
    20 0000006F 5468652073756D206F-     	addfmt: db "The sum of int1 + int2 = %d", 10, 0
    21 00000078 6620696E7431202B20-
    22 00000081 696E7432203D202564-
    23 0000008A 0A00               
    24 0000008C 546865206469666665-     	subfmt: db "The difference of int1 - int2 = %d", 10, 0
    25 00000095 72656E6365206F6620-
    26 0000009E 696E7431202D20696E-
    27 000000A7 7432203D2025640A00 
    28 000000B0 5468652070726F6475-     	mulfmt: db "The product of int1 * int2 = %d", 10, 0
    29 000000B9 6374206F6620696E74-
    30 000000C2 31202A20696E743220-
    31 000000CB 3D2025640A00       
    32 000000D1 5468652071756F7469-     	divfmt: db "The quotient of int1 / int2 = %d", 10, 0
    33 000000DA 656E74206F6620696E-
    34 000000E3 7431202F20696E7432-
    35 000000EC 203D2025640A00     
    36 000000F3 5468652072656D6169-     	remfmt: db "The remainder of int1 / int2 = %d", 10, 0
    37 000000FC 6E646572206F662069-
    38 00000105 6E7431202F20696E74-
    39 0000010E 32203D2025640A00   
    40                                  
    41                                  SECTION .bss				; BSS, uninitialized variables
    42 00000000 <res 00000004>          	int1:	resd 1
    43 00000004 <res 00000004>          	int2:	resd 1
    44 00000008 <res 00000004>          	int3:	resd 1
    45 0000000C <res 00000004>          	quotient: resd 1
    46 00000010 <res 00000004>          	remainder: resd 1
    47                                  		
    48                                  SECTION .text				; Code section.
    49                                  
    50                                  	global main				; the standard gcc entry point
    51                                  
    52                                  	main:					; the program label for the entry point
    53 00000000 55                      		push ebp			; set up stack frame
    54 00000001 89E5                    		mov ebp,esp
    55                                  
    56 00000003 68[00000000]            		push dword name		; print name
    57 00000008 E8(00000000)            		call printf
    58 0000000D 81C404000000            		add esp, 4
    59                                  
    60 00000013 68[13000000]            		push dword hw		; print assignment
    61 00000018 E8(00000000)            		call printf
    62 0000001D 81C404000000            		add esp, 4
    63                                  
    64 00000023 68[40000000]            		push dword prompt	; print prompt for variables
    65 00000028 E8(00000000)            		call printf
    66 0000002D 81C404000000            		add esp, 4
    67                                  
    68 00000033 68[04000000]            		push dword int2		; variable 2
    69 00000038 68[00000000]            		push dword int1		; variable 1
    70 0000003D 68[3A000000]            		push dword input	; input format
    71 00000042 E8(00000000)            		call scanf			; take two variables as an input
    72 00000047 81C40C000000            		add esp, 12
    73                                  
    74                                  
    75 0000004D A1[04000000]            		mov eax, [int2]
    76 00000052 99                      		cdq
    77                                  		;mul [int1] 				;eax = eax * [int1]
    78 00000053 8B1D[00000000]          		mov ebx, [int1]
    79 00000059 F7F3                    		div ebx
    80                                  
    81                                  		
    82                                  		
    83 0000005B FF35[04000000]          		push dword [int2]	
    84 00000061 FF35[00000000]          		push dword [int1]
    85 00000067 68[21000000]            		push dword fmt
    86 0000006C E8(00000000)            		call printf			; prinf out the values of the two variables
    87 00000071 81C40C000000            		add esp, 12
    88                                  
    89 00000077 A1[04000000]            		mov eax, [int2]		; function which adds the two variables
    90 0000007C 8B1D[00000000]          		mov ebx, [int1]
    91 00000082 01D8                    		add eax, ebx
    92 00000084 50                      		push eax
    93 00000085 68[6F000000]            		push dword addfmt
    94 0000008A E8(00000000)            		call printf
    95 0000008F 81C404000000            		add esp, 4
    96                                  
    97 00000095 A1[04000000]            		mov eax, [int2]		; function which subtracts the two variables
    98 0000009A 8B1D[00000000]          		mov ebx, [int1]
    99 000000A0 29C3                    		sub ebx, eax
   100 000000A2 50                      		push eax
   101 000000A3 68[8C000000]            		push dword subfmt
   102 000000A8 E8(00000000)            		call printf
   103 000000AD 81C404000000            		add esp, 4
   104                                  
   105 000000B3 A1[04000000]            		mov eax, [int2]		; function which multiplys the two variables
   106 000000B8 8B1D[00000000]          		mov ebx, [int1]
   107 000000BE F7E3                    		mul ebx
   108 000000C0 50                      		push eax
   109 000000C1 68[B0000000]            		push dword mulfmt
   110 000000C6 E8(00000000)            		call printf
   111 000000CB 81C404000000            		add esp, 4
   112                                  
   113 000000D1 8B1D[04000000]          		mov ebx, [int2]
   114 000000D7 A1[00000000]            		mov eax, [int1]
   115 000000DC 99                      		cdq
   116 000000DD F7F3                    		div ebx
   117 000000DF A3[0C000000]            		mov [quotient], eax
   118 000000E4 50                      		push eax
   119 000000E5 68[D1000000]            		push dword divfmt
   120 000000EA E8(00000000)            		call printf
   121 000000EF 81C404000000            		add esp, 4
   122                                  
   123 000000F5 8B1D[04000000]          		mov ebx, [int2]
   124 000000FB A1[00000000]            		mov eax, [int1]
   125 00000100 99                      		cdq
   126 00000101 F7F3                    		div ebx
   127 00000103 8915[10000000]          		mov [remainder], edx
   128 00000109 52                      		push edx
   129 0000010A 68[F3000000]            		push dword remfmt
   130 0000010F E8(00000000)            		call printf
   131 00000114 81C404000000            		add esp, 4
   132                                  		
   133 0000011A 89EC                    		mov esp, ebp	; takedown stack frame
   134 0000011C 5D                      		pop ebp			; same as "leave" op
   135                                  
   136 0000011D B800000000              		mov eax,0		; normal, no error, return value
   137 00000122 C3                      		ret					; return
   138                                  	
