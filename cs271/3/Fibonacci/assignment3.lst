     1                                  	; Name: Kevin Stine
     2                                  	; Creation date: 1/26/15
     3                                  	; Last modified: 9:00 pm 1/26/15
     4                                  	;
     5                                  	; 
     6                                  	; Name of file: assignment3.asm
     7                                  	; Description: 
     8                                  		
     9                                  	; Assemble:	nasm -f elf -l assignment3.lst  assignment3.asm
    10                                  	; Link:		gcc -m32 -o assignment3  assignment3.o
    11                                  	; Run:		./
    12                                  	; Output:	
    13                                  
    14                                  	; Equivalent C code
    15                                  	; /* printf1.c  print an int and an expression */
    16                                  	; #include <stdio.h>
    17                                  	; int main()
    18                                  	; {
    19                                  	;   int a=5;
    20                                  	;   printf("a=%d, eax=%d\n", a, a+2);
    21                                  	;   return 0;
    22                                  	; }
    23                                  
    24                                  	; Declare needed external functions
    25                                  	;
    26                                  	extern	printf			; the C function, to be called
    27                                  	extern scanf
    28                                  SECTION .data				; Data section, initialized variables
    29 00000000 50726F6772616D2054-     	title:		db "Program Title: assignment3.asm", 10, 0
    30 00000009 69746C653A20617373-
    31 00000012 69676E6D656E74332E-
    32 0000001B 61736D0A00         
    33 00000020 4E616D653A204B6576-     	designer: 	db "Name: Kevin Stine", 10, 0
    34 00000029 696E205374696E650A-
    35 00000032 00                 
    36 00000033 506C6561736520656E-     	prompt: 	db "Please enter your name", 10, 0
    37 0000003C 74657220796F757220-
    38 00000045 6E616D650A00       
    39 0000004B 48656C6C6F2025730A-     	greet:		db "Hello %s", 10, 0
    40 00000054 00                 
    41 00000055 257300                  	name_input:	db "%s", 0
    42 00000058 506C6561736520656E-     	intPrompt:	db "Please enter an integer in the range [1-46]", 10, 0
    43 00000061 74657220616E20696E-
    44 0000006A 746567657220696E20-
    45 00000073 7468652072616E6765-
    46 0000007C 205B312D34365D0A00 
    47 00000085 256400                  	int_input:	db "%d", 0
    48 00000088 546865206E756D6265-     	number: 	db "The number you entered: %d", 10, 0
    49 00000091 7220796F7520656E74-
    50 0000009A 657265643A2025640A-
    51 000000A3 00                 
    52 000000A4 546865206E756D6265-     	invalid:	db "The number you entered is not valid", 10, 0
    53 000000AD 7220796F7520656E74-
    54 000000B6 65726564206973206E-
    55 000000BF 6F742076616C69640A-
    56 000000C8 00                 
    57 000000C9 596F7572206E756D62-     	valid:		db "Your number is valid!", 10, 0
    58 000000D2 65722069732076616C-
    59 000000DB 6964210A00         
    60 000000E0 5468616E6B20796F75-     	goodbye:	db "Thank you %s", 10, 0
    61 000000E9 2025730A00         
    62 000000EE 257500                  	formatStr:	db "%u", 0
    63 000000F1 202020202000            	space5:		db "     ", 0
    64 000000F7 200A00                  	newLine:	db " ", 10, 0
    65 000000FA 00000000                	num2:		dd 0
    66 000000FE 01000000                	num3:		dd 1
    67 00000102 00000000                	num4:		dd 0
    68                                  SECTION .bss				; BSS, uninitialized variables
    69 00000000 <res 00000004>          	user_name:	resd 1
    70 00000004 <res 00000004>          	user_int:	resd 1
    71 00000008 <res 00000004>          	cols:		resd 1
    72                                  
    73                                  SECTION .text				; Code section.
    74                                  
    75                                  	global main				; the standard gcc entry point
    76                                  
    77                                  	main:					; the program label for the entry point
    78 00000000 55                      		push	ebp			; set up stack frame
    79 00000001 89E5                    		mov		ebp,esp
    80                                  		
    81                                  	;Introduction block of code
    82                                  	;Prints out my name and the title of the assignment 
    83                                  	introduction:
    84 00000003 68[20000000]            		push dword designer	; print the designers Name
    85 00000008 E8(00000000)            		call printf
    86 0000000D 81C404000000            		add esp, 4
    87                                  
    88 00000013 68[00000000]            		push dword title
    89 00000018 E8(00000000)            		call printf
    90 0000001D 81C404000000            		add esp, 4
    91                                  
    92                                  	;Asks the user for their name 
    93                                  	user_instructions:
    94 00000023 68[33000000]            		push dword prompt
    95 00000028 E8(00000000)            		call printf
    96 0000002D 81C404000000            		add esp, 4
    97                                  
    98 00000033 68[00000000]            		push dword user_name
    99 00000038 68[55000000]            		push dword name_input
   100 0000003D E8(00000000)            		call scanf
   101 00000042 81C408000000            		add esp, 8
   102                                  
   103 00000048 BA[00000000]            		mov edx, user_name
   104 0000004D 52                      		push edx
   105 0000004E 68[4B000000]            		push dword greet
   106 00000053 E8(00000000)            		call printf
   107 00000058 81C404000000            		add esp, 4
   108                                  
   109                                  	;Prompt the user for and integer to calculate the nth sequence 
   110                                  	get_user_data:
   111                                  		.prompt:
   112 0000005E 68[58000000]            			push dword intPrompt
   113 00000063 E8(00000000)            			call printf
   114 00000068 81C404000000            			add esp, 4
   115                                  
   116 0000006E 68[04000000]            			push dword user_int
   117 00000073 68[85000000]            			push dword int_input
   118 00000078 E8(00000000)            			call scanf
   119 0000007D 81C408000000            			add esp, 8
   120                                  
   121 00000083 A1[04000000]            			mov eax, [user_int]
   122 00000088 50                      			push eax
   123 00000089 68[88000000]            			push dword number
   124 0000008E E8(00000000)            			call printf
   125 00000093 81C404000000            			add esp, 4
   126                                  
   127                                  		.check:
   128 00000099 A1[04000000]            			mov eax, [user_int]
   129 0000009E 3D01000000              			cmp eax, 1
   130 000000A3 7CB9                    			jl .prompt
   131 000000A5 3D2E000000              			cmp eax, 46
   132 000000AA 7FB2                    			jg .prompt
   133 000000AC E900000000              			jmp .valid
   134                                  
   135                                  		.valid:
   136 000000B1 68[C9000000]            			push dword valid
   137 000000B6 E8(00000000)            			call printf
   138 000000BB 81C404000000            			add esp, 4
   139                                  
   140                                  
   141                                  	;Calculate and display the fibonaccis numbers 
   142                                  	display_fibs:
   143 000000C1 BB00000000              		mov ebx, 0
   144                                  		.loop:
   145 000000C6 43                      			inc ebx
   146                                  			; t2 = t1
   147 000000C7 A1[FE000000]            		    mov eax, [num3]
   148 000000CC A3[02010000]            		    mov [num4], eax
   149                                  		 
   150                                  		    ; t1 = t0
   151 000000D1 A1[FA000000]            		    mov eax, [num2]
   152 000000D6 A3[FE000000]            		    mov [num3], eax
   153                                  		 
   154                                  		    ; t0 = t1 + t2
   155 000000DB A1[FE000000]            		    mov eax, [num3]
   156 000000E0 0305[02010000]          		    add eax, [num4]
   157 000000E6 A3[FA000000]            		    mov [num2], eax
   158                                  		 
   159                                  		    ; printf("%u\n", t0)    
   160 000000EB 50                      		    push eax
   161 000000EC 68[EE000000]            		    push dword formatStr
   162 000000F1 E8(00000000)            		    call printf
   163 000000F6 81C404000000            		    add esp, 4 
   164                                  
   165 000000FC 68[F1000000]            		    push dword space5
   166 00000101 E8(00000000)            		    call printf
   167 00000106 81C404000000            		    add esp, 4
   168                                  
   169 0000010C 81FB05000000            		    cmp ebx, 5
   170 00000112 7412                    		    je .newLine
   171                                  
   172 00000114 A1[04000000]            		    mov eax, [user_int]
   173 00000119 48                      		    dec eax
   174 0000011A A3[04000000]            		    mov [user_int], eax
   175 0000011F 3D00000000              		    cmp eax, 0
   176 00000124 7FA0                    		    jg .loop
   177                                  		 
   178                                  		    ; n = n - 1; loop if n > 0
   179                                  		.newLine:
   180 00000126 68[F7000000]            			push dword newLine
   181 0000012B E8(00000000)            			call printf
   182 00000130 81C404000000            			add esp, 4   
   183                                  
   184                                  		.loopBlock:
   185 00000136 A1[04000000]            			mov eax, [user_int]
   186 0000013B 48                      		    dec eax
   187 0000013C A3[04000000]            		    mov [user_int], eax
   188 00000141 3D00000000              		    cmp eax, 0
   189 00000146 0F8F75FFFFFF            		    jg display_fibs
   190                                  	 
   191                                  	;displays the exit message 
   192                                  	farewell:
   193 0000014C B8[00000000]            		mov eax, user_name
   194 00000151 50                      		push eax
   195 00000152 68[E0000000]            		push dword goodbye
   196 00000157 E8(00000000)            		call printf
   197 0000015C 81C404000000            		add esp, 4  
   198                                  
   199 00000162 89EC                    		mov		esp, ebp	; takedown stack frame
   200 00000164 5D                      		pop		ebp			; same as "leave" op
   201                                  
   202 00000165 B800000000              		mov		eax,0		; normal, no error, return value
   203 0000016A C3                      		ret					; return
   204                                  	
