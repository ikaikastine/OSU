     1                                     extern printf  
     2                                     extern scanf
     3                                  
     4                                  SECTION .data              ; Data section, initialized variables
     5 00000000 506C6561736520656E-        numPrompt:  db "Please enter a value for n", 10, 0
     6 00000009 74657220612076616C-
     7 00000012 756520666F72206E0A-
     8 0000001B 00                 
     9 0000001C 25642C00                   numFmt:     db "%d,", 0
    10 00000020 5468652071756F7469-        testQuotient:  db "The quotient is = %d", 10, 0
    11 00000029 656E74206973203D20-
    12 00000032 25640A00           
    13 00000036 5468652072656D6169-        testRemainder: db "The remainder is = %d", 10, 0
    14 0000003F 6E646572206973203D-
    15 00000048 2025640A00         
    16 0000004D 5468652072656D6169-        zRem: db "The remainder is zero", 10, 0
    17 00000056 6E646572206973207A-
    18 0000005F 65726F0A00         
    19 00000064 5468652072656D6169-        nzRem: db "The remainder is not zero", 10, 0
    20 0000006D 6E646572206973206E-
    21 00000076 6F74207A65726F0A00 
    22                                  
    23                                  SECTION .bss 
    24 00000000 <res 00000004>             primeInput: resd 1
    25 00000004 <res 00000004>             remainder:  resd 1
    26                                  SECTION .text
    27                                  
    28                                  global main             ; the standard gcc entry point
    29                                  
    30                                     main:                   ; the program label for the entry point
    31 00000000 55                             push    ebp         ; set up stack frame
    32 00000001 89E5                           mov     ebp, esp
    33                                  
    34 00000003 68[00000000]                   push dword numPrompt
    35 00000008 E8(00000000)                   call printf 
    36 0000000D 81C404000000                   add esp, 4
    37                                  
    38 00000013 68[00000000]                   push dword primeInput
    39 00000018 68[1C000000]                   push dword numFmt
    40 0000001D E8(00000000)                   call scanf
    41 00000022 81C408000000                   add esp, 8
    42                                  
    43                                         ;mov eax, [primeInput]
    44                                         ;mov ebx, 2
    45                                  
    46 00000028 BB02000000                    mov ebx, 2     ; finds the remainder after dividing the two variables
    47 0000002D A1[00000000]                  mov eax, [primeInput]
    48 00000032 99                            cdq
    49 00000033 F7F3                          div ebx
    50 00000035 8915[04000000]                mov [remainder], edx
    51 0000003B 52                            push edx
    52 0000003C 68[36000000]                  push dword testRemainder
    53 00000041 E8(00000000)                  call printf
    54 00000046 81C404000000                  add esp, 4
    55 0000004C 8B1D[04000000]                mov ebx, [remainder]
    56                                  
    57 00000052 81FB00000000                  cmp ebx, 0
    58 00000058 7419                          je .remZero
    59                                  
    60 0000005A 53                            push ebx 
    61 0000005B 68[36000000]                  push dword testRemainder
    62 00000060 E8(00000000)                  call printf 
    63 00000065 81C404000000                  add esp, 4 
    64                                  
    65 0000006B 81FB00000000                  cmp ebx, 0 
    66 00000071 7515                          jne .notZero
    67                                  
    68                                        .remZero:
    69 00000073 68[4D000000]                     push dword zRem
    70 00000078 E8(00000000)                     call printf 
    71 0000007D 81C404000000                     add esp, 4
    72 00000083 E926000000                       jmp .exit
    73                                  
    74                                        .notZero:
    75 00000088 68[64000000]                     push dword nzRem
    76 0000008D E8(00000000)                     call printf 
    77 00000092 81C404000000                     add esp, 4 
    78 00000098 E911000000                       jmp .exit
    79                                  
    80                                  
    81 0000009D 50                             push eax 
    82 0000009E 68[20000000]                   push dword testQuotient
    83 000000A3 E8(00000000)                   call printf 
    84 000000A8 81C404000000                   add esp, 4 
    85                                  
    86                                         
    87                                  
    88                                   .exit:  
    89                                  
    90                                  
    91 000000AE 89EC                    mov     esp, ebp    ; takedown stack frame
    92 000000B0 5D                      pop     ebp         ; same as "leave" op
    93                                  
    94 000000B1 B800000000              mov     eax, 0       ; normal, no error, return value
    95 000000B6 C3                      ret                 ; return
