     1                                  extern printf 
     2                                  SECTION .data               ; Data section, initialized variables
     3 00000000 48656C6C6F2C206D79-      array5:     db "Hello, my name is Kevin.", 0
     4 00000009 206E616D6520697320-
     5 00000012 4B6576696E2E00     
     6                                   array5Len:  equ $-array5-1
     7 00000019 257300                   asoutput:   db "%s", 0        ; string output
     8 0000001C 0A00                     newline:    db "", 10, 0      ; format for a new line
     9 0000001E 25633A2000               acoutput: db "%c: ", 0                 ; output format for character output
    10 00000023 256400                   freqNum:   db "%d", 0
    11 00000026 546865206C656E6774-      arrLen:    db "The length of the array is %d", 10, 0
    12 0000002F 68206F662074686520-
    13 00000038 617272617920697320-
    14 00000041 25640A00           
    15                                  
    16 00000045 596F75722073747269-      greeting:  db "Your string is as follows: ", 10, 0
    17 0000004E 6E6720697320617320-
    18 00000057 666F6C6C6F77733A20-
    19 00000060 0A00               
    20                                  
    21                                  SECTION .bss                   ; BSS, uninitialized variables
    22 00000000 <res 00000200>           arrayq:     resd 128          ; frequency array of the first 127 ascii values initialized to 0 (none have been counted yet)
    23                                  
    24                                  SECTION .text
    25                                    global main           ; the standard gcc entry point
    26                                    main:                 ; the program label for the entry point
    27 00000000 55                          push    ebp         ; set up stack frame
    28 00000001 89E5                        mov     ebp,esp
    29                                  
    30 00000003 BE[00000000]                mov esi, array5
    31 00000008 BF00000000                  mov edi, 0
    32 0000000D BB[00000000]                mov ebx, arrayq
    33 00000012 B918000000                  mov ecx, array5Len
    34                                  
    35                                  
    36                                      
    37                                  ; get each character of array5 and add 1 to the frequency table of the corresponding ascii value (which the arrayq is indexed by ascii value).
    38                                  .loopf:
    39 00000017 31C0                        xor eax, eax
    40 00000019 8A06                        mov al, [esi]
    41                                      ;mov ax, [esi]
    42                                      ;mov ax, al
    43                                      ;mov cx, ax
    44 0000001B 01C7                        add edi, eax
    45 0000001D BB01000000                  mov ebx, 1
    46 00000022 011CBD[00000000]            add [arrayq+4*edi], ebx
    47                                  
    48 00000029 BF00000000                  mov edi, 0
    49 0000002E 81C601000000                add esi, 1
    50 00000034 E2E1                        loop .loopf
    51                                  
    52 00000036 68[00000000]                push dword array5
    53 0000003B 68[19000000]                push dword asoutput
    54 00000040 E8(00000000)                call printf
    55 00000045 81C408000000                add esp, 8
    56                                  
    57 0000004B 68[1C000000]                push dword newline
    58 00000050 E8(00000000)                call printf
    59 00000055 81C404000000                add esp, 4
    60                                  
    61                                      ;pop ebx    
    62 0000005B BB[00000000]                mov ebx, arrayq
    63 00000060 B980000000                  mov ecx, 128                            ; size of arrayq
    64 00000065 BE00000000                  mov esi, 0                              ;start at beginning
    65                                  .loopa:
    66 0000006A B800000000                  mov eax, 0
    67 0000006F 390433                      cmp [ebx+esi], eax
    68 00000072 744A                        je .skip
    69 00000074 89F0                        mov eax, esi
    70 00000076 53                          push ebx
    71 00000077 51                          push ecx
    72 00000078 BB04000000                  mov ebx, 4
    73 0000007D 99                          cdq
    74 0000007E F7F3                        div ebx
    75 00000080 50                          push eax
    76 00000081 68[1E000000]                push dword acoutput
    77 00000086 E8(00000000)                call printf
    78 0000008B 81C408000000                add esp, 8
    79 00000091 59                          pop ecx
    80 00000092 5B                          pop ebx
    81                                  
    82 00000093 53                          push ebx
    83 00000094 51                          push ecx                                    ; make sure to put ecx (counter) on stack so we don't lose it when calling printf)
    84 00000095 FF3433                      push dword [ebx + esi]                  ; put the value of the array at this (esi) index on the stack to be used by printf
    85                                      ;push dword acoutput                          ; put the array output format on the stack for printf to use
    86 00000098 68[23000000]                push dword freqNum
    87 0000009D E8(00000000)                call printf                                 ; call the printf command
    88 000000A2 81C408000000                add esp, 8                                  ; add 4 bytes * 2
    89 000000A8 59                          pop ecx                                     ; get ecx back
    90 000000A9 5B                          pop ebx
    91                                  
    92 000000AA 53                          push ebx
    93 000000AB 51                          push ecx
    94 000000AC 68[1C000000]                push dword newline
    95 000000B1 E8(00000000)                call printf
    96 000000B6 81C404000000                add esp, 4
    97 000000BC 59                          pop ecx
    98 000000BD 5B                          pop ebx
    99                                  
   100                                  .skip:
   101 000000BE 81C604000000                add esi, 4
   102 000000C4 E2A4                        loop .loopa
   103                                  .end:
   104 000000C6 89EC                        mov     esp, ebp    ; takedown stack frame
   105 000000C8 5D                          pop     ebp         ; same as "leave" op
